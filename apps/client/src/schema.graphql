enum Role {
  ADMIN
  USER
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

type Client {
  id: ID!
  name: String!
  email: String!
  phone: String!
  projects: [Project]!
}

input ClientInput {
  name: String!
  email: String!
  phone: String!
  user: ID!
}

type Project {
  id: ID!
  name: String!
  description: String!
  user: User!
  status: Status!
}

type Error {
  message: String!
  type: String!
}

type User {
  id: ID!
  name: String!
  username: String!
  email: String!
  projectCount: Int!
  projects: [Project]!
  clients: [Client]!
  password: String!
  role: Role!
}

input UserInput {
  name: String!
  username: String!
  email: String!
  confirmEmail: String!
  password: String!
  confirmPassword: String!
  role: Role!
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  password: String
  newPassword: String
  username: String
  role: Role
}

input UserFilter {
  name: String
  username: String
  email: String
  role: String
}

type UsersQueryReturn {
  users: [User]
  error: Error
}

type UserQueryReturn {
  user: User
  error: Error
}

type CreateUserReturn {
  user: User
  error: Error
}

type UpdateUserReturn {
  user: User
  error: Error
}

type DeleteUserReturn {
  status: String
  error: Error
}

type Query {
  users(filter: UserFilter): UsersQueryReturn!
  user(id: ID!): UserQueryReturn!
  me: UserQueryReturn!
}

input LoginInput {
  user: String
  password: String
}

type LoginReturn {
  user: User
  error: Error
}

type Mutation {
  createClient(input: ClientInput!): Client!
  createUser(input: UserInput!): CreateUserReturn!
  updateUser(input: UpdateUserInput!): UpdateUserReturn!
  deleteUser(id: ID!): DeleteUserReturn!
  login(input: LoginInput!): LoginReturn!
  logout: Boolean!
}
