input LoginInput {
  user: String!
  password: String!
}

type Mutation {
  login(input: LoginInput!): User
  logout: Boolean!
  createClient(input: ClientInput!): Client!
  updateClient(id: ID!, input: ClientInput!): Client!
  deleteClient(id: ID!): String!
  createProject(input: ProjectInput!): Project!
  updateProject(id: ID!, input: UpdateProjectInput!): Project!
  deleteProject(id: ID!): String!
  createTask(input: TaskInput!): Task!
  updateTask(input: UpdateTaskInput!): Task!
  deleteTask(id: ID!): String!
  createUser(input: UserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
}

type Client implements Node {
  id: ID!
  name: String!
  email: String!
  phone: String!
  projects: ProjectConnection
  user: User!
  createdAt: String!
  updatedAt: String
}

type ClientEdge {
  cursor: String!
  node: Client
}

type ClientConnection {
  pageInfo: PageInfo!
  edges: [ClientEdge]
}

input ClientFilter {
  name: String
  email: String
  phone: String
}

input ClientInput {
  name: String!
  email: String!
  phone: String!
  user: ID!
}

type Query {
  clients(filter: ClientFilter): [Client]!
  client(id: ID!): Client
  projects(filter: ProjectFilter): [Project]!
  project(id: ID!): Project!
  tasks(filter: TaskFilter): [Task]!
  task(id: ID!): Task!
  users(filter: UserFilter): [User]!
  user(id: ID): User!
  isLoggedIn: Boolean!
  node(id: ID!): Node
}

type Project implements Node {
  id: ID!
  name: String!
  description: String!
  client: Client!
  user: User!
  tasks(first: Int, after: String, last: Int, before: String): TaskConnection
  status: Status!
  createdAt: String!
  updatedAt: String
}

type ProjectEdge {
  cursor: String!
  node: Project
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]
}

input ProjectInput {
  name: String!
  description: String
  client: ID!
  user: ID!
  status: Status!
}

input UpdateProjectInput {
  name: String
  description: String
  status: Status
  client: ID
  user: ID
}

input ProjectFilter {
  name: String
  status: Status
  client: ID
  user: ID
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

interface Node {
  id: ID!
}

type Task implements Node {
  id: ID!
  title: String!
  description: String
  project: Project!
  user: User!
  status: Status!
  createdAt: String!
  updatedAt: String
}

type TaskEdge {
  cursor: String!
  node: Task
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]
}

input TaskInput {
  title: String!
  description: String
  project: ID!
  user: ID!
  status: Status!
}

input UpdateTaskInput {
  id: ID!
  title: String
  description: String
  status: Status
}

input TaskFilter {
  name: String
  status: Status
}

enum Role {
  USER
  ADMIN
}

type TaskCount {
  NOT_STARTED: Int
  IN_PROGRESS: Int
  COMPLETED: Int
  TOTAL: Int
}

type User implements Node {
  id: ID!
  name: String!
  username: String!
  email: String!
  password: String!
  role: Role!
  projects(first: Int, after: String, last: Int, before: String): ProjectConnection
  clients(first: Int, after: String, last: Int, before: String): ClientConnection
  tasks(first: Int, after: String, last: Int, before: String): TaskConnection
  clientCount: Int
  projectCount: Int
  taskCount: TaskCount
  createdAt: String!
  updatedAt: String
}

input UserInput {
  name: String!
  username: String!
  email: String!
  confirmEmail: String!
  password: String!
  confirmPassword: String!
  role: Role!
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  password: String
  oldPassword: String
  username: String
  role: Role
}

input UserFilter {
  name: String
  username: String
  email: String
  role: String
}

schema {
  query: Query
  mutation: Mutation
}
