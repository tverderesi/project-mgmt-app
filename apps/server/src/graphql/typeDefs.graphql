enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum Role {
  USER
  ADMIN
}

type Client {
  id: ID!
  name: String!
  email: String!
  phone: String!
  projects: [Project]!
}

type TaskCountByStatus {
  status: Status!
  count: Int!
}

input ClientInput {
  name: String!
  email: String!
  phone: String!
  user: ID!
}

type User {
  id: ID!
  name: String!
  username: String!
  email: String!
  password: String!
  photo: String
  projects: [Project]
  clients: [Client]!
  role: Role!
}

type UserStats {
  projectCount: Int!
  clientCount: Int!
  taskCountByStatus: [TaskCountByStatus]!
  totalTaskCount: Int!
}

input UserInput {
  name: String!
  username: String!
  email: String!
  confirmEmail: String!
  password: String!
  confirmPassword: String!
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  password: String
  oldPassword: String
  username: String
}

type Project {
  id: ID!
  name: String!
  description: String!
  client: Client!
  user: User!
  tasks: [Task]!
  status: Status!
}

input UserFilter {
  name: String
  username: String
  email: String
  role: String
}

input ProjectInput {
  name: String!
  description: String
  client: ID!
  user: ID!
  status: Status!
}

input UpdateProjectInput {
  name: String
  description: String
  status: Status
  client: ID
  user: ID
}

type Task {
  id: ID!
  name: String!
  description: String
  project: Project!
  user: User!
  status: Status!
}

input TaskInput {
  name: String!
  description: String
  project: ID!
  user: ID!
  status: Status!
}

input UpdateTaskInput {
  name: String
  description: String
  status: Status
}

input LoginInput {
  user: String!
  password: String!
}

input ProjectFilter {
  name: String
  status: Status
  client: ID
  user: ID
}

type Query {
  clients(filter: ClientFilter): [Client]!
  client(id: ID!): Client
  users(filter: UserFilter): [User]
  user(id: ID!): User!
  projects(filter: ProjectFilter): [Project]!
  project(id: ID!): Project!
  tasks(filter: TaskFilter): [Task]!
  task(id: ID!): Task!
  currentUser: User
  deletedUsers: [User]!
  deletedClients: [Client]!
  deletedProjects: [Project]!
  userStats(id: ID!): UserStats!
}

input ClientFilter {
  name: String
  email: String
  phone: String
}

input TaskFilter {
  name: String
  status: Status
}

type Mutation {
  createClient(input: ClientInput!): Client!
  updateClient(id: ID!, input: ClientInput!): Client!
  deleteClient(id: ID!): String!
  restoreClient(id: ID!): String!
  purgeClient(id: ID!): String!
  createUser(input: UserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: ID!): String!
  restoreUser(id: ID!): String!
  purgeUser(id: ID!): String!
  createProject(input: ProjectInput!): Project!
  updateProject(id: ID!, input: UpdateProjectInput!): Project!
  deleteProject(id: ID!): String!
  restoreProject(id: ID!): String!
  purgeProject(id: ID!): String!
  createTask(input: TaskInput!): Task!
  updateTask(id: ID!, input: UpdateTaskInput!): Task!
  deleteTask(id: ID!): String!
  restoreTask(id: ID!): String!
  purgeTask(id: ID!): String!
  login(input: LoginInput!): User!
  logout: Boolean!
}
