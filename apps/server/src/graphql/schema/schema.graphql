enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum Role {
  USER
  ADMIN
}

type TaskCountByStatus {
  status: Status!
  count: Int!
}

type Project {
  id: ID!
  name: String!
  description: String!
  client: Client!
  user: User!
  tasks: [Task]!
  status: Status!
}

input ProjectInput {
  name: String!
  description: String
  client: ID!
  user: ID!
  status: Status!
}

input UpdateProjectInput {
  name: String
  description: String
  status: Status
  client: ID
  user: ID
}

type Task {
  id: ID!
  name: String!
  description: String
  project: Project!
  user: User!
  status: Status!
}

input TaskInput {
  name: String!
  description: String
  project: ID!
  user: ID!
  status: Status!
}

input UpdateTaskInput {
  name: String
  description: String
  status: Status
}

input ProjectFilter {
  name: String
  status: Status
  client: ID
  user: ID
}

input TaskFilter {
  name: String
  status: Status
}

type Query {
  projects(filter: ProjectFilter): [Project]!
  project(id: ID!): Project!
  tasks(filter: TaskFilter): [Task]!
  task(id: ID!): Task!
}

type Mutation {
  createProject(input: ProjectInput!): Project!
  updateProject(id: ID!, input: UpdateProjectInput!): Project!
  deleteProject(id: ID!): String!
  createTask(input: TaskInput!): Task!
  updateTask(id: ID!, input: UpdateTaskInput!): Task!
  deleteTask(id: ID!): String!
}
