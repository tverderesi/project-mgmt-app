type Task implements Node {
  id: ID!
  title: String!
  description: String
  project: Project!
  user: User!
  status: Status!
}

type TaskEdge {
  node: Task!
  cursor: String!
}

type TaskConnection {
  edges: [TaskEdge]!
  pageInfo: PageInfo!
}

input TaskInput {
  title: String!
  description: String
  project: ID!
  user: ID!
  status: Status!
}

input UpdateTaskInput {
  id: ID!
  title: String
  description: String
  status: Status
}

input TaskFilter {
  name: String
  status: Status
  project: ID
  user: ID
}

type TaskCountByStatus {
  NOT_STARTED: Int!
  IN_PROGRESS: Int!
  COMPLETED: Int!
  TOTAL: Int!
}

type Query {
  tasks(first: Int, after: String, last: Int, before: String, filter: TaskFilter): TaskConnection!
  taskCountByStatus(user: ID): TaskCountByStatus!
  task(id: ID!): Task!
}

type Mutation {
  createTask(input: TaskInput!): Task!
  updateTask(input: UpdateTaskInput!): Task!
  deleteTask(id: ID!): String!
}
