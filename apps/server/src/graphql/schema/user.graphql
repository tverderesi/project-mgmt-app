enum Role {
  USER
  ADMIN
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserConnection {
  edges: [UserEdge]!
  pageInfo: PageInfo!
}

type User implements Node {
  id: ID!
  name: String!
  username: String!
  email: String!
  password: String!
  role: Role!
}

input UserInput {
  name: String!
  username: String!
  email: String!
  confirmEmail: String!
  password: String!
  confirmPassword: String!
  role: Role!
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  password: String
  oldPassword: String
  username: String
  role: Role
}

input UserFilter {
  name: String
  username: String
  email: String
  role: String
}

type Query {
  users(first: Int, after: String, last: Int, before: String, filter: UserFilter): UserConnection!
  user(id: ID): User!
  isLoggedIn: Boolean!
}

type Mutation {
  createUser(input: UserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
}
