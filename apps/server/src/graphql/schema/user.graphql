enum Role {
  USER
  ADMIN
}

type TaskCountByStatus {
  status: Status!
  count: Int!
}

type User {
  id: ID!
  name: String!
  username: String!
  email: String!
  password: String!
  role: Role!
  projects: [Project]!
  clients: [Client]!
  clientCount: Int
  projectCount: Int
  totalTaskCount: Int
  taskCountByStatus: [TaskCountByStatus]
}

input UserInput {
  name: String!
  username: String!
  email: String!
  confirmEmail: String!
  password: String!
  confirmPassword: String!
  role: Role!
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  password: String
  oldPassword: String
  username: String
  role: Role
}

input UserFilter {
  name: String
  username: String
  email: String
  role: String
}

type Query {
  users(filter: UserFilter): [User]!
  user(id: ID): User!
  isLoggedIn: Boolean!
}

type Mutation {
  createUser(input: UserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
}
