type User {
  id: ID!
  name: String!
  username: String!
  email: String!
  password: String!
  role: Role!
  projects: [Project]
  clients: [Client]!
  clientCount: Int
  projectCount: Int
  totalTaskCount: Int
  taskCountByStatus: [TaskCountByStatus]
}

input UserInput {
  name: String!
  username: String!
  email: String!
  confirmEmail: String!
  password: String!
  confirmPassword: String!
  role: Role!
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  password: String
  oldPassword: String
  username: String
  role: Role
}

input UserFilter {
  name: String
  username: String
  email: String
  role: String
}

type UsersQueryReturn {
  users: [User]
  error: Error
}

type UserQueryReturn {
  user: User
  error: Error
}

type CreateUserReturn {
  user: User
  error: Error
}

type UpdateUserReturn {
  user: User
  error: Error
}

type DeleteUserReturn {
  status: String
  error: Error
}

type Query {
  users(filter: UserFilter): UsersQueryReturn!
  user(id: ID!): UserQueryReturn!
  me: UserQueryReturn!
}

type Mutation {
  createUser(input: UserInput!): CreateUserReturn!
  updateUser(input: UpdateUserInput!): UpdateUserReturn!
  deleteUser(id: ID!): DeleteUserReturn!
}
